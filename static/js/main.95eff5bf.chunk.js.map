{"version":3,"sources":["svgs/CheckSVG.tsx","helpers/index.tsx","components/Cell/index.tsx","components/User/index.tsx","components/Users/index.tsx","queries/index.js","components/Page/index.tsx","components/Link/index.tsx","components/Header/index.tsx","components/Homepage/index.tsx","App.tsx","serviceWorker.ts","apolloClient/index.ts","index.tsx"],"names":["CheckSVG","className","viewBox","d","hasKey","obj","key","Cell","user","id","avatar","online","email","src","alt","href","User","userData","keys","filter","map","Users","usersData","users","Object","GET_PAGE","gql","Page","match","params","param","Number","toString","useQuery","variables","loading","data","error","page","title","description","LinkComponent","path","to","Header","Link","Homepage","App","exact","component","Boolean","window","location","hostname","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","forEach","message","locations","console","log","HttpLink","uri","credentials","fetch","cache","InMemoryCache","addTypename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mUAWeA,G,MARE,WACf,OACE,yBAAKC,UAAU,WAAWC,QAAQ,aAChC,0BAAMC,EAAE,iiBCNd,SAASC,EAAUC,EAAQC,GACzB,OAAOA,KAAOD,E,UCkBDE,EAbF,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MACxC,OACE,wBAAIX,UAAS,uBAAyB,WAAPQ,EAAkB,cAAgB,IAAMH,IAAKG,GACzEC,GAAU,yBAAKT,UAAU,WAAWY,IAAKL,EAAKE,OAAQI,IAAI,WAC1DH,GAAU,kBAAC,EAAD,MACVC,GAASR,EAAOI,EAAMC,IACrB,uBAAGM,KAAI,iBAAYP,EAAKC,KAAQD,EAAKC,KAErCG,GAASR,EAAOI,EAAMC,IAAOD,EAAKC,KCO3BO,EAjBF,SAAC,GAA2B,IAAzBR,EAAwB,EAAxBA,KACRS,EADgC,EAAlBC,KAEjBC,QAAO,SAAAb,GAAG,MAAY,WAARA,GAA4B,OAARA,KAClCc,KAAI,SAAAd,GAAG,OACN,kBAAC,EAAD,CACEG,GAAIH,EACJI,OAAgB,SAARJ,EACRM,MAAe,UAARN,EACPK,OAAgB,WAARL,GAAoBE,EAAKG,OACjCH,KAAMA,EACNF,IAAKA,OAIX,OAAO,oCAAGW,ICaGI,G,MA1BD,SAAC,GAAuB,IAC9BC,EAD6B,EAApBC,MACSH,KAAI,SAAAZ,GAC1B,IAAMU,EAAiBM,OAAON,KAAKV,GAEnC,OACE,wBAAIF,IAAKE,EAAKC,IACZ,kBAAC,EAAD,CAAMD,KAAMA,EAAMU,KAAMA,QAK9B,OAAO,2BAAOjB,UAAU,eACtB,+BACE,4BACE,wBAAIA,UAAU,gBAAd,QACA,wBAAIA,UAAU,gBAAd,SACA,wBAAIA,UAAU,gBAAd,YACA,wBAAIA,UAAU,gBAAd,YAGJ,+BACGqB,M,4TCxBP,IAAMG,E,MAAWC,GAAH,KCgCCC,EA3BF,SAAC,GAA6C,IACjDlB,EADgD,EAA1CmB,MACgBC,OAAtBpB,GACFqB,GAAiBC,OAAOtB,GAAM,GAAGuB,WAFiB,EAIvBC,YAC/BR,EACA,CACES,UAAW,CAAEJ,WAHTK,EAJgD,EAIhDA,QAASC,EAJuC,EAIvCA,KAAMC,EAJiC,EAIjCA,MAOvB,OAAIF,EAAgB,yCAChBE,EAAc,qEAEdD,EAEA,oCACE,wBAAInC,UAAU,cAAcmC,EAAKE,KAAKC,OACtC,2CAAiBH,EAAKE,KAAKE,aAC3B,kBAAC,EAAD,CAAOjB,MAAOa,EAAKE,KAAKf,SAKvB,MCrBMkB,EANO,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOG,EAAV,EAAUA,KAAV,OACpB,4BACE,kBAAC,IAAD,CAAMC,GAAID,GAAOH,KCQNK,EAXA,kBACb,6BACE,4BACE,kBAACC,EAAD,CAAMH,KAAK,IAAIH,MAAM,SACrB,kBAACM,EAAD,CAAMH,KAAK,WAAWH,MAAM,eAC5B,kBAACM,EAAD,CAAMH,KAAK,WAAWH,MAAM,gBAC5B,kBAACM,EAAD,CAAMH,KAAK,WAAWH,MAAM,kBCHnBO,EAJE,WACf,OAAO,wBAAI7C,UAAU,SAAd,SCaM8C,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOL,KAAK,IAAIM,OAAK,EAACC,UAAWH,IACjC,kBAAC,IAAD,CAAOJ,KAAK,aAAaO,UAAWtB,MCCtBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2D,oDCWS0B,EAtBK,IAAIC,IAAa,CACnCC,KAAMC,IAAWC,KAAK,CACpBC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACpBD,GACFA,EAAcE,SAAQ,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWtB,EAAvB,EAAuBA,KAAvB,OACpBuB,QAAQC,IAAR,oCAC+BH,EAD/B,uBACqDC,EADrD,mBACyEtB,OAGzEmB,GAAcI,QAAQC,IAAR,2BAAgCL,OAEpD,IAAIM,IAAS,CACXC,IAAK,6CACLC,YAAa,cACbC,MAAOA,QAGXC,MAAO,IAAIC,IAAc,CACvBC,aAAa,MCjBjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBtB,OAAQA,GACtB,kBAAC,EAAD,QAGJuB,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACL4B,QAAQ5B,MAAMA,EAAM0B,c","file":"static/js/main.95eff5bf.chunk.js","sourcesContent":["import React from 'react'\nimport './index.css'\n\nconst CheckSVG = () => {\n  return (\n    <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\n      <path d=\"M10.219,1.688c-4.471,0-8.094,3.623-8.094,8.094s3.623,8.094,8.094,8.094s8.094-3.623,8.094-8.094S14.689,1.688,10.219,1.688 M10.219,17.022c-3.994,0-7.242-3.247-7.242-7.241c0-3.994,3.248-7.242,7.242-7.242c3.994,0,7.241,3.248,7.241,7.242C17.46,13.775,14.213,17.022,10.219,17.022 M15.099,7.03c-0.167-0.167-0.438-0.167-0.604,0.002L9.062,12.48l-2.269-2.277c-0.166-0.167-0.437-0.167-0.603,0c-0.166,0.166-0.168,0.437-0.002,0.603l2.573,2.578c0.079,0.08,0.188,0.125,0.3,0.125s0.222-0.045,0.303-0.125l5.736-5.751C15.268,7.466,15.265,7.196,15.099,7.03\"></path>\n    </svg>\n  )\n}\n\nexport default CheckSVG\n","function hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj\n}\n\nexport {\n  hasKey\n}\n","import React from 'react'\nimport CheckSVG from '../../svgs/CheckSVG'\nimport { hasKey } from '../../helpers'\nimport { ICell } from '../../interfaces'\nimport './styles.css'\n\nconst Cell = ({ user, id, avatar, online, email }: ICell) => {\n  return (\n    <td className={`user-content ${id === 'online' ? 'user-online' : ''}`} key={id}>\n      {avatar && <img className=\"user-img\" src={user.avatar} alt=\"avatar\" />}\n      {online && <CheckSVG />}\n      {email && hasKey(user, id) && (\n        <a href={`mailto:${user[id]}`}>{user[id]}</a>\n      )}\n      {!email && hasKey(user, id) && user[id]}\n    </td>\n  )\n}\n\nexport default Cell\n","import React from 'react'\nimport Cell from '../Cell'\nimport { IUser } from '../../interfaces'\n\nconst User = ({ user, keys }: IUser) => {\n  const userData = keys\n    .filter(key => key !== 'avatar' && key !== 'id')\n    .map(key => (\n      <Cell\n        id={key}\n        avatar={key === 'name'}\n        email={key === 'email'}\n        online={key === 'online' && user.online}\n        user={user}\n        key={key}\n      />\n    ))\n\n  return <>{userData}</>\n}\n\nexport default User\n","import React from 'react'\nimport User from '../User'\nimport { IUsers } from '../../interfaces'\nimport './styles.css'\n\nconst Users = ({ users }: IUsers) => {\n  const usersData = users.map(user => {\n    const keys: string[] = Object.keys(user)\n\n    return (\n      <tr key={user.id}>\n        <User user={user} keys={keys} />\n      </tr>\n    )\n  })\n\n  return <table className=\"users-table\">\n    <thead>\n      <tr>\n        <th className=\"table-header\">Name</th>\n        <th className=\"table-header\">Email</th>\n        <th className=\"table-header\">Location</th>\n        <th className=\"table-header\">Online</th>\n      </tr>\n    </thead>\n    <tbody>\n      {usersData}\n    </tbody>\n  </table>\n}\n\nexport default Users\n","import gql from 'graphql-tag'\n\nconst GET_PAGE = gql`\n  query page($param: ID!) {\n    page(id: $param) {\n      id\n      title,\n      description,\n      users {\n        id,\n        name,\n        email,\n        location,\n        online,\n        avatar\n      }\n    }\n  }\n`\n\nexport {\n  GET_PAGE\n}\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\nimport Users from '../Users'\nimport { GET_PAGE } from '../../queries'\nimport { TParams, TPageQueryResponse, TPageQueryVariables } from '../../types'\n\nconst Page = ({ match }: RouteComponentProps<TParams>) => {\n  const { id }: TParams = match.params\n  const param: string = (Number(id) - 1).toString()\n\n  const { loading, data, error } = useQuery<TPageQueryResponse, TPageQueryVariables>(\n    GET_PAGE,\n    {\n      variables: { param }\n    }\n  )\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error retrieving data from the server.</p>;\n\n  if (data) {\n    return (\n      <>\n        <h2 className=\"page-title\">{data.page.title}</h2>\n        <p>Description: {data.page.description}</p>\n        <Users users={data.page.users} />\n      </>\n    )\n  }\n\n  return null\n}\n\nexport default Page\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { ILink } from '../../interfaces'\n\nconst LinkComponent = ({ title, path }: ILink) => (\n  <li>\n    <Link to={path}>{title}</Link>\n  </li>\n)\n\nexport default LinkComponent","import React from 'react'\nimport Link from '../Link'\n\nconst Header = () => (\n  <nav>\n    <ul>\n      <Link path=\"/\" title=\"Home\" />\n      <Link path=\"/pages/1\" title=\"First Page\" />\n      <Link path=\"/pages/2\" title=\"Second Page\" />\n      <Link path=\"/pages/3\" title=\"Third Page\" />\n    </ul>\n  </nav>\n)\n\nexport default Header\n","import React from 'react'\n\nconst Homepage = () => {\n  return <h2 className=\"title\">Home</h2>;\n}\n\nexport default Homepage\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Page from './components/Page'\nimport Header from './components/Header'\nimport Homepage from './components/Homepage'\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Route path=\"/\" exact component={Homepage} />\n      <Route path=\"/pages/:id\" component={Page} />\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\nimport fetch from 'unfetch'\n\nconst client: any = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n          ),\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    new HttpLink({\n      uri: 'https://usersappdesk.herokuapp.com/graphql',\n      credentials: 'same-origin',\n      fetch: fetch\n    })\n  ]),\n  cache: new InMemoryCache({\n    addTypename: false\n  })\n})\n\nexport default client\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apolloClient'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}